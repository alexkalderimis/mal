(do
    (defn even? [x] (= 0 (% x 2)))
    (defn odd? [x] (= 0 (% (- x 1) 2)))

    (defn filter
          [f xs]
          (if (empty? xs)
              xs
              (let [[x & xss] xs
                    tail (filter f xss)]
                   (if (f x) (cons x tail) tail))))
    (defn map
          [f xs]
          (if (empty? xs)
              xs
              (let [[x & xss] xs] (cons (f x) (map f xss)))))

    (defn rest
          [xs]
          (if (empty? xs)
               xs
              (let [[x & xss] xs] xss)))

    (defn first
          [xs]
          (if (empty? xs)
               nil
              (let [[x] xs] x)))

    (def! not (fn* [x] (if x false true))))
